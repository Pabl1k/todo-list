{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","initialState","status","error","setAppErrorAC","type","setAppStatusAC","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","App","AppBar","position","Toolbar","LinearProgress","Container","fixed","right","top","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fdee602.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '172b4ff6-60d5-4aca-b4a8-6169eeb66e32'\r\n    }\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType;\r\n    error: string | null;\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType;\r\n","import {Dispatch} from 'redux';\r\nimport {todolistsAPI, TodolistType} from '../../api/todolists-api';\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer';\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then(() => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then(() => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import { Dispatch } from 'redux';\r\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer';\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan';\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm';\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task';\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api';\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer';\r\nimport { fetchTasksTC } from '../tasks-reducer';\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >\r\n                All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer';\r\nimport { TaskStatuses } from '../../api/todolists-api';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm';\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer';\r\nimport { Todolist } from './Todolist/Todolist';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {AppRootStateType} from './store';\r\nimport {RequestStatusType} from './app-reducer';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status);\r\n\r\n    return (\r\n        <>\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar />\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n                <Container fixed>\r\n                    <TodolistsList demo={demo}/>\r\n                </Container>\r\n            <div style={{position: \"absolute\", right: 0, top: 50, width: 300}}>\r\n                <h3>\r\n                    NOTE:\r\n                </h3>\r\n                <span>\r\n                    Please note that it is an open page with a single API key to the server. Anything written here can be added by any internet user.\r\n                </span>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}